import{fn as u,j as A,ak as q,U as R,M as P,cM as E,dJ as W,e as _,i as z,ft as F,r as C,k as M,er as K,aw as D,u as N,az as j,K as h,N as m,O as G}from"./main.33d7d020.js";import{b as V,g as J,d as B}from"./kmlUtils.3c4f5a4e.js";import{v as H}from"./Bitmap.098e0f43.js";import{t as O}from"./BitmapContainer.9c9b9086.js";import{f as Q,u as X}from"./LayerView.53ba493a.js";import{i as b}from"./GraphicContainer.560ad31d.js";import{a as f}from"./BaseGraphicContainer.150dd7ff.js";import"./preload-helper.387dac8f.js";import"./utils.7b62fe23.js";import"./Utils.57d8db19.js";import"./enums.6e42a319.js";import"./enums.de935fa5.js";import"./Texture.f83f8541.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.cf505ce5.js";import"./WGLContainer.adae2513.js";import"./VertexArrayObject.b7b30936.js";import"./ProgramTemplate.68308178.js";import"./StyleDefinition.627ffe6c.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";import"./CIMSymbolHelper.5220d63f.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.81c030fc.js";import"./projectionSupport.c4301e0c.js";import"./json.d1a0fa35.js";import"./FeatureContainer.8afc87c8.js";import"./TileContainer.d3a549ea.js";import"./visualVariablesUtils.21a05a73.js";import"./visualVariablesUtils.ad8715a1.js";import"./Matcher.18f213b9.js";import"./tileUtils.fe90fe1b.js";import"./TileClipper.b8f35890.js";import"./Geometry.b68345ae.js";import"./ExpandedCIM.2d641832.js";import"./quantizationUtils.0b483864.js";import"./devEnvironmentUtils.8c6e6b72.js";import"./schemaUtils.b60ba386.js";import"./createSymbolSchema.6c920fb3.js";import"./MD5.97b39efc.js";import"./util.c2280301.js";import"./ComputedAttributeStorage.0aefd524.js";import"./centroid.ebd55a46.js";import"./vec3f32.8d37ecf5.js";class L{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let r=class extends Q(X){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new O,this._kmlVisualData=new L,this.allVisiblePoints=new u,this.allVisiblePolylines=new u,this.allVisiblePolygons=new u,this.allVisibleMapImages=new A}async hitTest(i,t){const e=this.layer;return[this._pointsView?.hitTest(i),this._polylinesView?.hitTest(i),this._polygonsView?.hitTest(i)].flat().filter(Boolean).map(l=>(l.layer=e,l.sourceLayer=e,{type:"graphic",graphic:l,layer:e,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new f({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new b(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new f({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new b(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new f({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new b(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),q(()=>this.layer.visibleSublayers,i=>{for(const[t,e]of this._kmlVisualData.allSublayers)e.visibility=0;for(const t of i){const e=this._kmlVisualData.allSublayers.get(t.id);e&&(e.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal))}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&R(i.href,{responseType:"image"}).then(({data:t})=>{let e=P.fromJSON(i.extent);E(e,this.view.spatialReference)&&(e=W(e,this.view.spatialReference));const l=new H(t,"standard");l.x=e.xmin,l.y=e.ymax,l.resolution=e.width/t.naturalWidth,l.rotation=i.rotation,this._mapImageContainer.addChild(l),this._bitmapIndex.set(i,l)})}async _getViewDependentUrl(i,t){const{viewFormat:e,viewBoundScale:l,httpQuery:s}=i;if(_(e)){if(z(t))throw new Error("Loading this network link requires a view state.");let a;if(await F(),_(l)&&l!==1){const n=new P(t.extent);n.expand(l),a=n}else a=t.extent;a=C(a,M.WGS84);const p=C(a,M.WebMercator),d=a.xmin,y=a.xmax,o=a.ymin,U=a.ymax,$=t.size[0]*t.pixelRatio,T=t.size[1]*t.pixelRatio,v=Math.max(p.width,p.height),S={"[bboxWest]":d.toString(),"[bboxEast]":y.toString(),"[bboxSouth]":o.toString(),"[bboxNorth]":U.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":v.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":v.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":$.toString(),"[vertPixels]":T.toString(),"[terrainEnabled]":"0","[clientVersion]":K,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},I=n=>{for(const x in n)for(const k in S)n[x]=n[x].replace(k,S[k])},c=D(e);I(c);let w={};_(s)&&(w=D(s),I(w));const g=N(i.href);return g.query={...g.query,...c,...w},`${g.path}?${j(c)}`}return i.href}async _fetchService(i){const t=new L;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,e){return this._fetchParsedKML(i,e).then(async l=>{for(const s of l.sublayers){t.allSublayers.set(s.id,s);const a=s.points?await V(s.points):[],p=s.polylines?await V(s.polylines):[],d=s.polygons?await V(s.polygons):[],y=s.mapImages||[];if(t.allPoints.push(...a.map(o=>({item:o,sublayerId:s.id}))),t.allPolylines.push(...p.map(o=>({item:o,sublayerId:s.id}))),t.allPolygons.push(...d.map(o=>({item:o,sublayerId:s.id}))),t.allMapImages.push(...y.map(o=>({item:o,sublayerId:s.id}))),s.networkLink){const o=await this._getViewDependentUrl(s.networkLink,this.view.state);await this._loadVisualData(o,t,e)}}})}_fetchParsedKML(i,t){return J(i,this.view.spatialReference,this.layer.refreshInterval,t).then(e=>B(e.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};h([m()],r.prototype,"_pointsView",void 0),h([m()],r.prototype,"_polylinesView",void 0),h([m()],r.prototype,"_polygonsView",void 0),h([m()],r.prototype,"updating",void 0),r=h([G("esri.views.2d.layers.KMLLayerView2D")],r);const ji=r;export{ji as default};
