import{K as o,O as n,ak as p,bn as y,e as m,eY as u}from"./main.33d7d020.js";import d from"./FeatureLayerView2D.864180ce.js";import"./preload-helper.387dac8f.js";import"./utils.7b62fe23.js";import"./Utils.57d8db19.js";import"./enums.6e42a319.js";import"./enums.de935fa5.js";import"./Texture.f83f8541.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.cf505ce5.js";import"./LayerView.53ba493a.js";import"./schemaUtils.b60ba386.js";import"./visualVariablesUtils.ad8715a1.js";import"./createSymbolSchema.6c920fb3.js";import"./CIMSymbolHelper.5220d63f.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./ExpandedCIM.2d641832.js";import"./quantizationUtils.0b483864.js";import"./MD5.97b39efc.js";import"./util.c2280301.js";import"./popupUtils.39676bd5.js";import"./RefreshableLayerView.d0732d13.js";function h(r,e){return!r.visible||r.minScale!==0&&e>r.minScale||r.maxScale!==0&&e<r.maxScale}let l=class extends d{initialize(){this.handles.add([p(()=>this.view?.viewpoint,()=>this._update(),y)])}_injectOverrides(r){let e=super._injectOverrides(r);const s=this.view.scale,t=this.layer.sublayers.filter(a=>h(a,s)).map(a=>a.subtypeCode);if(!t.length)return e;e=m(e)?e:new u().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${t.join(",")})`;return e.where=e.where?`(${e.where}) AND (${i})`:i,e}_setLayersForFeature(r){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=r.attributes[e.name],t=this.layer.sublayers.find(i=>i.subtypeCode===s);r.layer=t,r.sourceLayer=this.layer}_createSchemaConfig(){const r={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...r,definitionExpression:t}}};l=o([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],l);const k=l;export{k as default};
